[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 neocache authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/design.html","id":"neo4j-data-model","dir":"Articles","previous_headings":"","what":"Neo4J Data Model","title":"Design","text":"Neo4J uses labelled property graph model. elements labeled property graph model nodes, relationships, properties, labels. Nodes contain properties. Properties key-value pairs key string value semi-arbitrary value Nodes can one labels. Labels indicate role nodes within dataset Relationships connect nodes. Relationships directed, start node end node. Relationships can properties, just like nodes.","code":""},{"path":"/articles/design.html","id":"neo4j-schema","dir":"Articles","previous_headings":"","what":"Neo4J Schema","title":"Design","text":"database, represent Twitter user tweet node. indicate user follows user B adding edge user user B. edge label Follows.","code":""},{"path":"/articles/design.html","id":"nodes-and-node-labels","dir":"Articles","previous_headings":"Neo4J Schema","what":"Nodes and node labels","title":"Design","text":"User: user Twitter graph. Nodes User label following properties: sampled_at : Takes sentinel NULL value indicate user yet fully sampled, partial user information added graph point. Otherwise datetime indicate full information lookup_users() added graph. sampled_friends_at: NULL unless know users friends graph becaues explicitly added information get_friends(), case datetime added information graph. sampled_followers_at: sampled_friends_at followers instead friends. user_id screen_name protected followers_count friends_count listed_count statuses_count favourites_count account_created_at verified profile_url profile_expanded_url account_lang profile_banner_url profile_background_url profile_image_url name location , description url Tweet (ignore now) sampled_at status_id created_at text source display_text_width is_quote is_retweet favorite_count rtweet_count quote_count reply_count hashtags symbols urls_url urls_t.co urls_expanded_url media_url media_t.co media_expanded_url media_type ext_media_url ext_media_t.co ext_media_expanded_url ext_media_type lang status_url","code":""},{"path":"/articles/design.html","id":"edges","dir":"Articles","previous_headings":"Neo4J Schema","what":"Edges","title":"Design","text":"follows: relationship strictly two Users. example, @alexpghayes @karlrohe follow . tweeted: relationship User Tweet reply_to: relationship User Tweet reply_to: relationship two Tweets mentions: relationship User Tweet quotes: relationship two Tweets","code":""},{"path":[]},{"path":"/articles/design.html","id":"representation-of-the-database","dir":"Articles","previous_headings":"Psuedocode","what":"Representation of the database","title":"Design","text":"preliminary work, found fastest way send data Neo4J database HTTPs connection, rather write csv, move csv Docker filesystem, use read csv back Neo4J. implies abstract concept cache object contains information necessary ultimately interact underlying Neo4J database. turns consist two things: active HTTPs connection running Neo4J database, represented neo4r::connexion object information docker container hosting Neo4J database take information combine single cache object. idea code uses neocache, want user explicitly select cache want save data . , ","code":"# called for side effects new_cache <- function(cache_name) {      # use cli to ask to the user what to do if a cache with that name   # already exists. either overwrite, or stop.      cache  <- list(     name = cache_name,     docker_container_name = ...,     ...   )      class(cache) <- \"neocache\"      # create a docker container to host the cache's Neo4J database. be sure to   # overwrite an existing container if the user has requested it      # should use https://cli.r-lib.org/ to update the user if this is successful   # or if it fails      # do not start running the docker container      # save the cache object to ~/.cache/neocache/{cache_name}.rds }"},{"path":"/articles/design.html","id":"cached-api-calls","dir":"Articles","previous_headings":"Psuedocode","what":"Cached API Calls","title":"Design","text":"describe pseudocode drop replacements rtweet::lookup_users(), rtweet::get_friends() rtweet::get_followers(). following goal always minimize queries Neo4J data base Twitter API.","code":"#' @param users A character vector of user ids (never screen names) #' #' @return A tibble where each row corresponds to a User and each column #'   to one of the User properties. If a user cannot be sampled, should #'   return nothing for that user. If no users can be sampled, should #'   return an empty tibble with appropriate columns. #' lookup_users <- function(users) {   user_data <- db_lookup_users(users)   not_in_graph <- setdiff(users, user_data$user_id)   new_user_data <- add_new_users(not_in_graph)   not_sampled <- user_data %>`%     filter(is.null(sampled_at)) %>`%     pull(user_id)   upgraded_user_data <- sample_existing_users(not_sampled)   bind_rows(user_data, new_user_data, upgraded_user_data) }  db_lookup_users <- function(users) {   # return a tibble where each row corresponds to a User and each column   # to one of the User properties. when a user in not present in the   # database, should not return a row in the output tibble for that   # user. if no users are in the db should return an empty tibble with one   # column for each User property }  #' @return The tibble of user data, with one row for each (accessible) #'   user in `users` and one column for each property of `User` nodes #'   in the graph database. add_new_users <- function(users) {   # make sure to set sampled_at to Sys.time() and   # sampled_friends_at and sampled_followers_at to NULL   # return data on users }  sample_existing_users <- function(users) {   # pretty much the same as add_new_users(), except overwrite   # existing data on each user rather than creating new user nodes   # from scratch }  #' @param users A character vector of user ids (never screen names) #' #' @return A tibble where each row corresponds to a User and each column #'   to one of the User properties. If a user cannot be sampled, should #'   return nothing for that user. If no users can be sampled, should #'   return an empty tibble with appropriate columns. get_friends <- function(users) {   # here we will need to query twice: once to ask who we actually   # have *complete* friendship edges for, and then a second time to get   # those friendship edges   status <- friend_sampling_status(users)   # if you can add new edges to the database without   # creating duplicate edges (using MERGE?) you may be able   # to combine the logic in the following steps   new_edges <- add_new_friends(status$not_in_graph)   upgraded_edges <- sample_existing_friends(status$sampled_friends_at_is_null)   existing_edges <- db_get_friends(status$sampled_friends_at_not_null)   # need to be careful about duplicate edges here. ideally   # we guarantee that edges are unique somehow before this, but if not   # we can use dplyr::distinct(), although this is an expensive operation   bind_rows(new_edges, upgraded_edges, existing_edges) }  add_new_friends <- function(users) {   # set sampled_friends_at to Sys.time() and   # sampled_at and sampled_followers_at to NULL   # return friends of each user }  sample_existing_friends <- function(users) {   # set sampled_friends_at to Sys.time() and   # *leave* sampled_at and sampled_followers_at at their   # existing values   # first remove outgoing edges from users to other nodes   # in the database, as this information may be outdated   # and we're about to update it anyway   # return friends of each user }  friend_sampling_status <- function(users) {   # generate based on queries of user.sampled_friends_at node property   list(     not_in_graph = ...,     sampled_friends_at_is_null = ...,     sampled_friends_at_not_null = ...   ) }"},{"path":"/articles/design.html","id":"misc-thoughts","dir":"Articles","previous_headings":"","what":"Misc thoughts","title":"Design","text":"fair amount information may missing given User node; need carefully think various states User node might impact various graph queries user generated text liable contain Unicode abominations Note rtweet returns several fields containing geographic information think discard shit creepy (’m clear following User versus ‘Tweet properties either): - place_url  - place_name  - place_full_name  - place_type  - country  - country_code  - geo_coords  - coords_coords  - bbox_coords think : user states: healthy, banned, suspected, removed, etc, etc","code":""},{"path":"/articles/design.html","id":"cache-design-dump","dir":"Articles","previous_headings":"","what":"Cache design dump","title":"Design","text":"cache one two states: active inactive. active means docker container running library(neocache) 12:27 # 1 user creates cache (). cache object gets saved ~/.cache/neocache/{neocache_name}.rds 12:28 user wants stuff, first tell neocache gets things running background cache <- use_cache(“{neocache_name”) start_cache(cache) – starts docker 12:28 API calls need explicitly use cache 12:29 friends <- get_friends(…, cache = cache) 12:32 cache gets docker container","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Hayes. Author, maintainer, copyright holder. Nathan Kolbow. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hayes , Kolbow N (2022). neocache: Save Data Twitter API Neo4J Graph Database. R package version 0.0.0.9004, https://github.com/alexpghayes/neocache.","code":"@Manual{,   title = {neocache: Save Data from the Twitter API to a Neo4J Graph Database},   author = {Alex Hayes and Nathan Kolbow},   year = {2022},   note = {R package version 0.0.0.9004},   url = {https://github.com/alexpghayes/neocache}, }"},{"path":"/index.html","id":"neocache","dir":"","previous_headings":"","what":"Save Data from the Twitter API to a Neo4J Graph Database","title":"Save Data from the Twitter API to a Neo4J Graph Database","text":"neocache facilitates robust sampling Twitter graph. basic idea save data local cache get . neocache build top rtweet, Docker, Neo4J.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Save Data from the Twitter API to a Neo4J Graph Database","text":"can install development version neocache :","code":"install.packages(\"devtools\") devtools::install_github(\"alexpghayes/neocache\") library(neocache)  nc_sitrep() #>  #> ── Caches ────────────────────────────────────────────────────────────────────── #>   - aPPR (active)  #>   - get_friends_test (active)  #>   - HQWHHAKFKLRTCZLNQOSQ (active)  #>   - test_cache (active)"},{"path":"/index.html","id":"find-the-personalized-pagerank-of-a-twitter-user-and-cache-the-following-network-in-the-process","dir":"","previous_headings":"Installation","what":"Find the personalized pagerank of a Twitter user and cache the following network in the process","title":"Save Data from the Twitter API to a Neo4J Graph Database","text":"","code":"alexpghayes_ppr <- appr(   neocache_graph(),   \"alexpghayes\",   epsilon = 1e-4 )  alexpghayes_ppr$stats"},{"path":"/reference/add_friend_edges_to_nodes_in_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"users is a list of COMPLETELY NEW users. This function performs the following:\n\nFetch the friends of each user (call these main users) listed in users (call these blank friends)\nMERGE nodes for main users and blank friends (each of these nodes will only contain a id_str field)\nCreate edges between main users and their respective blank friends\nSet the sampled_friends_at property for nodes that were sampled\n — add_friend_edges_to_nodes_in_graph","title":"users is a list of COMPLETELY NEW users. This function performs the following:\n\nFetch the friends of each user (call these main users) listed in users (call these blank friends)\nMERGE nodes for main users and blank friends (each of these nodes will only contain a id_str field)\nCreate edges between main users and their respective blank friends\nSet the sampled_friends_at property for nodes that were sampled\n — add_friend_edges_to_nodes_in_graph","text":"users list COMPLETELY NEW users. function performs following: Fetch friends user (call main users) listed users (call blank friends) MERGE nodes main users blank friends (nodes contain id_str field) Create edges main users respective blank friends Set sampled_friends_at property nodes sampled","code":""},{"path":"/reference/add_friend_edges_to_nodes_in_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"users is a list of COMPLETELY NEW users. This function performs the following:\n\nFetch the friends of each user (call these main users) listed in users (call these blank friends)\nMERGE nodes for main users and blank friends (each of these nodes will only contain a id_str field)\nCreate edges between main users and their respective blank friends\nSet the sampled_friends_at property for nodes that were sampled\n — add_friend_edges_to_nodes_in_graph","text":"","code":"add_friend_edges_to_nodes_in_graph(   users,   n,   retryonratelimit,   cursor,   verbose,   token,   cache )"},{"path":"/reference/add_friend_edges_to_nodes_in_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"users is a list of COMPLETELY NEW users. This function performs the following:\n\nFetch the friends of each user (call these main users) listed in users (call these blank friends)\nMERGE nodes for main users and blank friends (each of these nodes will only contain a id_str field)\nCreate edges between main users and their respective blank friends\nSet the sampled_friends_at property for nodes that were sampled\n — add_friend_edges_to_nodes_in_graph","text":"users Screen name user ID target user user IDs friends (accounts followed target user) retrieved. n Desired number results return. Results downloaded pages n large; default value download single page. Set n = Inf download many results possible. Twitter API rate limits number requests can perform 15 minute period. easiest way download use retryonratelimit = TRUE. guaranteed get exactly n results back. get fewer results tweets deleted hit rate limit. get results ask number tweets multiple page size, e.g. request n = 150 page size 200, get 200 results back. retryonratelimit TRUE, rate limit exhausted, wait refreshes. Twitter rate limits refresh every 15 minutes. FALSE, rate limit exceeded, function terminate early warning; still get back results received point. default value, NULL, consults option rtweet.retryonratelimit can globally set TRUE, desired. expect query take hours days perform, rely soley retryonratelimit handle common failure modes like temporarily losing internet connection. cursor page results return. default return first page; can supply result previous call continue pagination left . verbose Show progress bars messages indicating current progress? token Expert use . Use override authentication single API call. cases better changing default calls. See auth_as() details. cache cache store information . Must cache, cache name.","code":""},{"path":"/reference/add_friend_edges_to_nodes_in_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"users is a list of COMPLETELY NEW users. This function performs the following:\n\nFetch the friends of each user (call these main users) listed in users (call these blank friends)\nMERGE nodes for main users and blank friends (each of these nodes will only contain a id_str field)\nCreate edges between main users and their respective blank friends\nSet the sampled_friends_at property for nodes that were sampled\n — add_friend_edges_to_nodes_in_graph","text":"2-column tibble edge list users friends","code":""},{"path":"/reference/add_lookup_users_info_to_nodes_in_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the user's lookup_users data then updates their info in the graph. — add_lookup_users_info_to_nodes_in_graph","title":"Fetches the user's lookup_users data then updates their info in the graph. — add_lookup_users_info_to_nodes_in_graph","text":"Fetches user's lookup_users data updates info graph.","code":""},{"path":"/reference/add_lookup_users_info_to_nodes_in_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the user's lookup_users data then updates their info in the graph. — add_lookup_users_info_to_nodes_in_graph","text":"","code":"add_lookup_users_info_to_nodes_in_graph(   users,   token,   retryonratelimit,   verbose,   cache )"},{"path":"/reference/add_lookup_users_info_to_nodes_in_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the user's lookup_users data then updates their info in the graph. — add_lookup_users_info_to_nodes_in_graph","text":"users User id screen name target user. token Expert use . Use override authentication single API call. cases better changing default calls. See auth_as() details. retryonratelimit TRUE, rate limit exhausted, wait refreshes. Twitter rate limits refresh every 15 minutes. FALSE, rate limit exceeded, function terminate early warning; still get back results received point. default value, NULL, consults option rtweet.retryonratelimit can globally set TRUE, desired. expect query take hours days perform, rely soley retryonratelimit handle common failure modes like temporarily losing internet connection. verbose Show progress bars messages indicating current progress? cache cache object. See nc_create_cache().","code":""},{"path":"/reference/add_lookup_users_info_to_nodes_in_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the user's lookup_users data then updates their info in the graph. — add_lookup_users_info_to_nodes_in_graph","text":"tibble user data","code":""},{"path":"/reference/appr.neocache_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate personalized pageranks — appr.neocache_graph","title":"Approximate personalized pageranks — appr.neocache_graph","text":"Computes personalized pagerank specified seeds using ApproximatePageRank algorithm Andersen et al. (2006). Computes degree-adjustments degree-regularization personalized pagerank vectors described Algorithms 3 4 Chen et al. (2019). algorithms randomized; results unstable across multiple runs, decrease epsilon.","code":""},{"path":"/reference/appr.neocache_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate personalized pageranks — appr.neocache_graph","text":"","code":"# S3 method for neocache_graph appr(   graph,   seeds,   ...,   alpha = 0.15,   epsilon = 1e-06,   tau = NULL,   max_visits = Inf )"},{"path":"/reference/appr.neocache_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate personalized pageranks — appr.neocache_graph","text":"graph abstract_graph() object, created rtweet_graph(). argument required. seeds character vector seeds personalized pagerank. personalized pagerank return seeds probability alpha node transition. moment, seeds given equal weighting. argument required. ... Ignored. Passing arguments ... results warning. alpha Teleportation constant. teleportation constant probability returning seed node node transition. alpha must valid probabilty; , zero one. Defaults 0.15. inverse \"dampening factor\" original PageRank paper, alpha = 0.15 corresponds dampening factor 0.85. Runtime proportional 1 / (epsilon * alpha), small alpha can result long runtimes. epsilon Desired accuracy approximation. epsilon must small positive number. Defaults 1e-6. aPPR guarantees approximated personalized pageranks uniformly within epsilon true value. , approximation guaranteed good L-infinity sense. guarantee, however, ranking nodes aPPR close ranking nodes PPR. Twitter graphs, recommend testing code 1e-4 1e-5, using 1e-6 exploration, 1e-7 1e-8 final results, although numbers rough. also perfectly reasonable run aPPR given number steps (set via max_visits), note approximation accuracy results. Internally, aPPR keeps running estimate achieved accuracy always valid. Anytime like explore graph, can simply decrease epsilon. can start epsilon = 1e-5 gradually decrease epsilon sample graph happy . Also note runtime proportional 1 / (epsilon * alpha), small epsilon can result long runtimes. tau Regularization term. Additionally inflates -degree observation term performing degree adjustment described Algorithm 3 Algorithm 4, described vignette(\"Mathematical details\"). Defaults NULL, case tau set average -degree observed nodes. general, setting reasonable set tau average -degree graph. max_visits Maximum number unique nodes visit. positive integer. Defaults Inf, upper bound number unique nodes visit. Useful want specify fixed amount computation (API calls) use rather error tolerance. recommend debugging max_visits ~ 20, exploration max_visits hundreds, max_visits thousands ten thousands precise results, although rough heuristic.","code":""},{"path":"/reference/appr.neocache_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate personalized pageranks — appr.neocache_graph","text":"Tracker() object. relevant stats field, tibble::tibble() following columns: name: Name node (character). p: Current estimate residual per -degree node. r: Estimated error pagerank estimate node. in_degree: Number incoming edges node. out_degree: Number outcoming edges node. degree_adjusted: personalized pagerank divided node -degree. regularized: personalized pagerank divide node -degree plus tau. computing personalized pageranks Twitter users (either via rtweet_graph(), name given user ID, screen name, regardless seed nodes specified.","code":""},{"path":"/reference/appr.neocache_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Approximate personalized pageranks — appr.neocache_graph","text":"Chen, Fan, Yini Zhang, Karl Rohe. “Targeted Sampling Massive Block Model Graphs Personalized PageRank.” Journal Royal Statistical Society: Series B (Statistical Methodology) 82, . 1 (February 2020): 99–126. https://doi.org/10.1111/rssb.12349. Andersen, Reid, Fan Chung, Kevin Lang. “Local Graph Partitioning Using PageRank Vectors.” 2006 47th Annual IEEE Symposium Foundations Computer Science (FOCS’06), 475–86. Berkeley, CA, USA: IEEE, 2006. https://doi.org/10.1109/FOCS.2006.44.","code":""},{"path":[]},{"path":"/reference/appr.neocache_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate personalized pageranks — appr.neocache_graph","text":"","code":"library(aPPR) library(neocache)  set.seed(27)  graph <- neocache_graph()  if (FALSE) { estimates <- appr(graph, \"alexpghayes\") estimates }"},{"path":"/reference/db_add_new_users.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges a batch of nodes to the graph with nothing but user_id's — db_add_new_users","title":"Merges a batch of nodes to the graph with nothing but user_id's — db_add_new_users","text":"Merges batch nodes graph nothing user_id's","code":""},{"path":"/reference/db_add_new_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges a batch of nodes to the graph with nothing but user_id's — db_add_new_users","text":"","code":"db_add_new_users(users, cache)"},{"path":"/reference/db_add_new_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges a batch of nodes to the graph with nothing but user_id's — db_add_new_users","text":"users vector users generate MERGE queries cache cache interface ","code":""},{"path":"/reference/db_get_followers.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the followers for the given user that already exist in the DB. — db_get_followers","title":"Gets the followers for the given user that already exist in the DB. — db_get_followers","text":"Gets followers given user already exist DB.","code":""},{"path":"/reference/db_get_followers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the followers for the given user that already exist in the DB. — db_get_followers","text":"","code":"db_get_followers(users, cache)"},{"path":"/reference/db_get_followers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the followers for the given user that already exist in the DB. — db_get_followers","text":"users list users already DB already follower edge data cache cache interface ","code":""},{"path":"/reference/db_get_followers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the followers for the given user that already exist in the DB. — db_get_followers","text":"2-column tibble edge list entries users users followers","code":""},{"path":"/reference/db_get_friends.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the friends for the given user that already exist in the DB. — db_get_friends","title":"Gets the friends for the given user that already exist in the DB. — db_get_friends","text":"Gets friends given user already exist DB.","code":""},{"path":"/reference/db_get_friends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the friends for the given user that already exist in the DB. — db_get_friends","text":"","code":"db_get_friends(users, cache)"},{"path":"/reference/db_get_friends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the friends for the given user that already exist in the DB. — db_get_friends","text":"users Screen name user ID target user user IDs friends (accounts followed target user) retrieved. cache cache store information . Must cache, cache name.","code":""},{"path":"/reference/db_get_friends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the friends for the given user that already exist in the DB. — db_get_friends","text":"2-column tibble edge list entries users users friends","code":""},{"path":"/reference/db_lookup_users.html","id":null,"dir":"Reference","previous_headings":"","what":"Looks up users that are already in the database. — db_lookup_users","title":"Looks up users that are already in the database. — db_lookup_users","text":"Looks users already database.","code":""},{"path":"/reference/db_lookup_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Looks up users that are already in the database. — db_lookup_users","text":"","code":"db_lookup_users(users, cache)"},{"path":"/reference/db_lookup_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Looks up users that are already in the database. — db_lookup_users","text":"users User id screen name target user. cache cache object. See nc_create_cache().","code":""},{"path":"/reference/db_lookup_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Looks up users that are already in the database. — db_lookup_users","text":"tibble existing data users","code":""},{"path":"/reference/docker_bulk_connect_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"This function creates edges en masse between all the nodes provided in the\ntbl argument. — docker_bulk_connect_nodes","title":"This function creates edges en masse between all the nodes provided in the\ntbl argument. — docker_bulk_connect_nodes","text":"function creates edges en masse nodes provided tbl argument.","code":""},{"path":"/reference/docker_bulk_connect_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function creates edges en masse between all the nodes provided in the\ntbl argument. — docker_bulk_connect_nodes","text":"","code":"docker_bulk_connect_nodes(tbl, cache)"},{"path":"/reference/docker_bulk_connect_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function creates edges en masse between all the nodes provided in the\ntbl argument. — docker_bulk_connect_nodes","text":"tbl tibble containing columns '' '' consisting users cache cache interface ","code":""},{"path":"/reference/docker_bulk_connect_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function creates edges en masse between all the nodes provided in the\ntbl argument. — docker_bulk_connect_nodes","text":"tibble edge list provided argument","code":""},{"path":"/reference/empty_edge_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty table of following information — empty_edge_list","title":"Create an empty table of following information — empty_edge_list","text":"Create empty table following information","code":""},{"path":"/reference/empty_edge_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty table of following information — empty_edge_list","text":"","code":"empty_edge_list()"},{"path":"/reference/empty_edge_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty table of following information — empty_edge_list","text":"empty 2-column tibble used placeholder user data available","code":""},{"path":"/reference/empty_user.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an empty table of user data — empty_user","title":"Create an empty table of user data — empty_user","text":"Create empty table user data","code":""},{"path":"/reference/empty_user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an empty table of user data — empty_user","text":"","code":"empty_user()"},{"path":"/reference/empty_user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an empty table of user data — empty_user","text":"empty tibble columns named lookup_user properties.  Used user data unavailable","code":""},{"path":"/reference/friend_sampling_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether friend data has already been sampled for the provided\nvector of users. — friend_sampling_status","title":"Checks whether friend data has already been sampled for the provided\nvector of users. — friend_sampling_status","text":"Checks whether friend data already sampled provided vector users.","code":""},{"path":"/reference/friend_sampling_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether friend data has already been sampled for the provided\nvector of users. — friend_sampling_status","text":"","code":"friend_sampling_status(users, cache)"},{"path":"/reference/friend_sampling_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether friend data has already been sampled for the provided\nvector of users. — friend_sampling_status","text":"users Screen name user ID target user user IDs friends (accounts followed target user) retrieved. cache cache store information . Must cache, cache name.","code":""},{"path":"/reference/friend_sampling_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether friend data has already been sampled for the provided\nvector of users. — friend_sampling_status","text":"list users either (1) currently graph, (2) graph friends sampled, (3) graph sampled friends","code":""},{"path":"/reference/get_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves a previously generated cache object. — get_cache","title":"Retrieves a previously generated cache object. — get_cache","text":"Retrieves previously generated cache object.","code":""},{"path":"/reference/get_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves a previously generated cache object. — get_cache","text":"","code":"get_cache(cache_name)"},{"path":"/reference/get_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves a previously generated cache object. — get_cache","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/get_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves a previously generated cache object. — get_cache","text":"list object containing information pertaining associated Docker container Neo4j instance","code":""},{"path":"/reference/nc_activate_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Starts the Docker container and Neo4j instance for the given cache — nc_activate_cache","title":"Starts the Docker container and Neo4j instance for the given cache — nc_activate_cache","text":"Starts Docker container Neo4j instance given cache","code":""},{"path":"/reference/nc_activate_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Starts the Docker container and Neo4j instance for the given cache — nc_activate_cache","text":"","code":"nc_activate_cache(cache_name)"},{"path":"/reference/nc_activate_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Starts the Docker container and Neo4j instance for the given cache — nc_activate_cache","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/nc_browse.html","id":null,"dir":"Reference","previous_headings":"","what":"Interact with a cached graph via the Neo4J browser interface — nc_browse","title":"Interact with a cached graph via the Neo4J browser interface — nc_browse","text":"Interact cached graph via Neo4J browser interface","code":""},{"path":"/reference/nc_browse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interact with a cached graph via the Neo4J browser interface — nc_browse","text":"","code":"nc_browse(cache_name)"},{"path":"/reference/nc_browse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interact with a cached graph via the Neo4J browser interface — nc_browse","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/nc_cache_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a cache with a given name exists — nc_cache_exists","title":"Check if a cache with a given name exists — nc_cache_exists","text":"Check cache given name exists","code":""},{"path":"/reference/nc_cache_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a cache with a given name exists — nc_cache_exists","text":"","code":"nc_cache_exists(cache_name)"},{"path":"/reference/nc_cache_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a cache with a given name exists — nc_cache_exists","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/nc_cache_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a cache with a given name exists — nc_cache_exists","text":"TRUE FALSE.","code":""},{"path":"/reference/nc_create_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a cache object — nc_create_cache","title":"Create a cache object — nc_create_cache","text":"Creates saves new cache instance given information.  Also generates new Docker container given information one already exist.","code":""},{"path":"/reference/nc_create_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a cache object — nc_create_cache","text":"","code":"nc_create_cache(   cache_name,   neo4j_pass = \"password\",   http_port = 7474,   bolt_port = 7687,   url = NULL )"},{"path":"/reference/nc_create_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a cache object — nc_create_cache","text":"cache_name name cache associated Docker container neo4j_pass password Neo4j instance http_port port Neo4j use inside Docker container HTTP connection bolt_port port Neo4j use inside Docker container Bolt connection url url used connect Neo4j database","code":""},{"path":"/reference/nc_deactivate_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Stops the Docker container and Neo4j instance for the given cache — nc_deactivate_cache","title":"Stops the Docker container and Neo4j instance for the given cache — nc_deactivate_cache","text":"Stops Docker container Neo4j instance given cache","code":""},{"path":"/reference/nc_deactivate_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stops the Docker container and Neo4j instance for the given cache — nc_deactivate_cache","text":"","code":"nc_deactivate_cache(cache_name)"},{"path":"/reference/nc_deactivate_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stops the Docker container and Neo4j instance for the given cache — nc_deactivate_cache","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/nc_destroy_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes the Docker container and cache save file corresponding to the given\ncache — nc_destroy_cache","title":"Removes the Docker container and cache save file corresponding to the given\ncache — nc_destroy_cache","text":"Removes Docker container cache save file corresponding given cache","code":""},{"path":"/reference/nc_destroy_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes the Docker container and cache save file corresponding to the given\ncache — nc_destroy_cache","text":"","code":"nc_destroy_cache(cache_name)"},{"path":"/reference/nc_destroy_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes the Docker container and cache save file corresponding to the given\ncache — nc_destroy_cache","text":"cache_name name cache associated Docker container","code":""},{"path":"/reference/nc_empty_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all data from a cache — nc_empty_cache","title":"Remove all data from a cache — nc_empty_cache","text":"Remove data cache","code":""},{"path":"/reference/nc_empty_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all data from a cache — nc_empty_cache","text":"","code":"nc_empty_cache(cache_name, check_with_me_first = TRUE)"},{"path":"/reference/nc_empty_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove all data from a cache — nc_empty_cache","text":"cache_name name cache associated Docker container check_with_me_first Whether confirm choice empty cache via CLI menu clearing cache","code":""},{"path":"/reference/nc_export_all_follows.html","id":null,"dir":"Reference","previous_headings":"","what":"Export all follows from the Neo4J database to a csv — nc_export_all_follows","title":"Export all follows from the Neo4J database to a csv — nc_export_all_follows","text":"Export follows Neo4J database csv","code":""},{"path":"/reference/nc_export_all_follows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export all follows from the Neo4J database to a csv — nc_export_all_follows","text":"","code":"nc_export_all_follows(cache_name, local_path)"},{"path":"/reference/nc_export_all_follows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export all follows from the Neo4J database to a csv — nc_export_all_follows","text":"cache_name name cache associated Docker container local_path path csv","code":""},{"path":"/reference/nc_export_all_users.html","id":null,"dir":"Reference","previous_headings":"","what":"Export all users from the Neo4J database to a csv — nc_export_all_users","title":"Export all users from the Neo4J database to a csv — nc_export_all_users","text":"Export users Neo4J database csv","code":""},{"path":"/reference/nc_export_all_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export all users from the Neo4J database to a csv — nc_export_all_users","text":"","code":"nc_export_all_users(cache_name, local_path)"},{"path":"/reference/nc_export_all_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export all users from the Neo4J database to a csv — nc_export_all_users","text":"cache_name name cache associated Docker container local_path path csv","code":""},{"path":"/reference/nc_get_friends.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetches the friends of each of the users contained in the users vector.\nReturns the friend relationships via a tibble edge list. — nc_get_friends","title":"Fetches the friends of each of the users contained in the users vector.\nReturns the friend relationships via a tibble edge list. — nc_get_friends","text":"Fetches friends users contained users vector. Returns friend relationships via tibble edge list.","code":""},{"path":"/reference/nc_get_friends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetches the friends of each of the users contained in the users vector.\nReturns the friend relationships via a tibble edge list. — nc_get_friends","text":"","code":"nc_get_friends(   users,   cache_name,   n = 5000,   retryonratelimit = TRUE,   cursor = \"-1\",   verbose = TRUE,   token = NULL )"},{"path":"/reference/nc_get_friends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetches the friends of each of the users contained in the users vector.\nReturns the friend relationships via a tibble edge list. — nc_get_friends","text":"users Screen name user ID target user user IDs friends (accounts followed target user) retrieved. cache_name name cache save data . n Desired number results return. Results downloaded pages n large; default value download single page. Set n = Inf download many results possible. Twitter API rate limits number requests can perform 15 minute period. easiest way download use retryonratelimit = TRUE. guaranteed get exactly n results back. get fewer results tweets deleted hit rate limit. get results ask number tweets multiple page size, e.g. request n = 150 page size 200, get 200 results back. retryonratelimit TRUE, rate limit exhausted, wait refreshes. Twitter rate limits refresh every 15 minutes. FALSE, rate limit exceeded, function terminate early warning; still get back results received point. default value, NULL, consults option rtweet.retryonratelimit can globally set TRUE, desired. expect query take hours days perform, rely soley retryonratelimit handle common failure modes like temporarily losing internet connection. cursor page results return. default return first page; can supply result previous call continue pagination left . verbose Show progress bars messages indicating current progress? token Expert use . Use override authentication single API call. cases better changing default calls. See auth_as() details.","code":""},{"path":"/reference/nc_get_friends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetches the friends of each of the users contained in the users vector.\nReturns the friend relationships via a tibble edge list. — nc_get_friends","text":"tibble row corresponds follower relationship user '' column user '' column","code":""},{"path":"/reference/nc_lookup_users.html","id":null,"dir":"Reference","previous_headings":"","what":"Get (cached) information about Twitter users — nc_lookup_users","title":"Get (cached) information about Twitter users — nc_lookup_users","text":"Looks information pertaining vector provided users. Retrieves cached data users already looked , fetches new data users bee looked yet Twitter API.","code":""},{"path":"/reference/nc_lookup_users.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get (cached) information about Twitter users — nc_lookup_users","text":"","code":"nc_lookup_users(   users,   cache_name,   token = NULL,   retryonratelimit = TRUE,   verbose = TRUE )"},{"path":"/reference/nc_lookup_users.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get (cached) information about Twitter users — nc_lookup_users","text":"users User id screen name target user. cache_name name cache associated Docker container token Expert use . Use override authentication single API call. cases better changing default calls. See auth_as() details. retryonratelimit TRUE, rate limit exhausted, wait refreshes. Twitter rate limits refresh every 15 minutes. FALSE, rate limit exceeded, function terminate early warning; still get back results received point. default value, NULL, consults option rtweet.retryonratelimit can globally set TRUE, desired. expect query take hours days perform, rely soley retryonratelimit handle common failure modes like temporarily losing internet connection. verbose Show progress bars messages indicating current progress?","code":""},{"path":"/reference/nc_lookup_users.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get (cached) information about Twitter users — nc_lookup_users","text":"tibble row corresponds User column one User properties. user sampled, return nothing user. users can sampled, return empty tibble appropriate columns.","code":""},{"path":"/reference/nc_sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Check caches with saved information — nc_sitrep","title":"Check caches with saved information — nc_sitrep","text":"Check caches saved information","code":""},{"path":"/reference/nc_sitrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check caches with saved information — nc_sitrep","text":"","code":"nc_sitrep()"},{"path":"/reference/neocache-package.html","id":null,"dir":"Reference","previous_headings":"","what":"neocache: Save Data from the Twitter API to a Neo4J Graph Database — neocache-package","title":"neocache: Save Data from the Twitter API to a Neo4J Graph Database — neocache-package","text":"Facilitates robust sampling Twitter graph saving data observed nodes data cache. Requests new nodes smart waste API requests nodes already cache. cache can exported number data structures appropriate network analysis.","code":""},{"path":[]},{"path":"/reference/neocache-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"neocache: Save Data from the Twitter API to a Neo4J Graph Database — neocache-package","text":"Maintainer: Alex Hayes alexpghayes@gmail.com (ORCID) [copyright holder] Authors: Nathan Kolbow nkolbow@wisc.edu","code":""},{"path":"/reference/neocache_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an abstract representation of the Twitter friendship graph — neocache_graph","title":"Create an abstract representation of the Twitter friendship graph — neocache_graph","text":"Signifies aPPR query Twitter friendship graph via neocache.","code":""},{"path":"/reference/neocache_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an abstract representation of the Twitter friendship graph — neocache_graph","text":"","code":"neocache_graph(cache_name = \"aPPR\", retryonratelimit = TRUE)"},{"path":"/reference/neocache_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an abstract representation of the Twitter friendship graph — neocache_graph","text":"cache_name name neocache use save data . retryonratelimit TRUE, rate limit exhausted, wait refreshes. Twitter rate limits refresh every 15 minutes. FALSE, rate limit exceeded, function terminate early warning; still get back results received point. default value, NULL, consults option rtweet.retryonratelimit can globally set TRUE, desired. expect query take hours days perform, rely soley retryonratelimit handle common failure modes like temporarily losing internet connection.","code":""},{"path":"/reference/neocache_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an abstract representation of the Twitter friendship graph — neocache_graph","text":"","code":"if (FALSE) {   test_ids <- c(\"780429268866052096\", \"1191642560\")  graph <- neocache_graph()  check(graph, test_ids) node_degrees(graph, test_ids) neighborhood(graph, test_ids[1])   }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/query_neo4j.html","id":null,"dir":"Reference","previous_headings":"","what":"Sends CYPHER queries to a given connexion object while suppressing output\nmessages that call_neo4j throws. — query_neo4j","title":"Sends CYPHER queries to a given connexion object while suppressing output\nmessages that call_neo4j throws. — query_neo4j","text":"Sends CYPHER queries given connexion object suppressing output messages call_neo4j throws.","code":""},{"path":"/reference/query_neo4j.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sends CYPHER queries to a given connexion object while suppressing output\nmessages that call_neo4j throws. — query_neo4j","text":"","code":"query_neo4j(query, cache, ...)"},{"path":"/reference/query_neo4j.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sends CYPHER queries to a given connexion object while suppressing output\nmessages that call_neo4j throws. — query_neo4j","text":"query CYPHER query passed call_neo4j cache cache interface ... Arguments passed neo4r::call_neo4j con NEO4JAPI connection object type Return result row graph output Use \"json\" want output printed JSON include_stats tShould stats transaction included? include_meta tShould stats transaction included?","code":""},{"path":"/reference/query_neo4j.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sends CYPHER queries to a given connexion object while suppressing output\nmessages that call_neo4j throws. — query_neo4j","text":"return value call_neo4j","code":""},{"path":"/news/index.html","id":"neocache-development-version","dir":"Changelog","previous_headings":"","what":"neocache (development version)","title":"neocache (development version)","text":"Due backwards incompatible change data schema (type-safety now better), users need delete existing caches upgrade can repopulated using new schema. can accomplish via nc_delete_cache(\"cache-name\").","code":""},{"path":"/news/index.html","id":"neocache-0009003","dir":"Changelog","previous_headings":"","what":"neocache 0.0.0.9003","title":"neocache 0.0.0.9003","text":"Added NEWS.md file track changes package.","code":""}]
